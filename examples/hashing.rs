use digest::Digest;

struct Node {
    pub key: String,
    pub value: String,
}

impl Node {
    pub fn new(key: impl ToString, value: impl ToString) -> Self {
        Self {
            key: key.to_string(),
            value: value.to_string(),
        }
    }
}

fn main() {
    let node_a = Node::new("do", "verb");
    let node_b = Node::new("dog", "puppy");
    let node_c = Node::new("doge", "coin");
    let node_d = Node::new("horse", "stallion");

    let rlp_a = rlp::encode(&node_a.key);
    let rlp_b = rlp::encode(&node_b.key);
    let rlp_c = rlp::encode(&node_c.key);
    let rlp_d = rlp::encode(&node_d.key);

    println!("Key encodings:");
    println!(
        "  {}",
        rlp_a
            .iter()
            .map(|x| format!("{x:02x}"))
            .collect::<String>()
    );
    println!(
        "  {}",
        rlp_b
            .iter()
            .map(|x| format!("{x:02x}"))
            .collect::<String>()
    );
    println!(
        "  {}",
        rlp_c
            .iter()
            .map(|x| format!("{x:02x}"))
            .collect::<String>()
    );
    println!(
        "  {}",
        rlp_d
            .iter()
            .map(|x| format!("{x:02x}"))
            .collect::<String>()
    );
    println!();

    let hash_a: [u8; 32] = {
        let mut hasher = sha3::Keccak256::default();
        hasher.update(rlp::encode(&node_a.key));
        hasher.finalize().into()
    };
    let hash_b: [u8; 32] = {
        let mut hasher = sha3::Keccak256::default();
        hasher.update(rlp::encode(&node_b.key));
        hasher.finalize().into()
    };
    let hash_c: [u8; 32] = {
        let mut hasher = sha3::Keccak256::default();
        hasher.update(rlp::encode(&node_c.key));
        hasher.finalize().into()
    };
    let hash_d: [u8; 32] = {
        let mut hasher = sha3::Keccak256::default();
        hasher.update(rlp::encode(&node_d.key));
        hasher.finalize().into()
    };

    println!("Key hashes:");
    println!(
        "  {}",
        hash_a
        .into_iter()
        .map(|x| format!("{x:02x}"))
        .collect::<String>()
    );
    println!(
        "  {}",
        hash_b
        .into_iter()
        .map(|x| format!("{x:02x}"))
        .collect::<String>()
    );
    println!(
        "  {}",
        hash_c
        .into_iter()
        .map(|x| format!("{x:02x}"))
        .collect::<String>()
    );
    println!(
        "  {}",
        hash_d
        .into_iter()
        .map(|x| format!("{x:02x}"))
        .collect::<String>()
    );
}

// use digest::Digest;
// use rlp::RlpStream;

// const BLOCK_DATA_A: &[u8] = &[
//     0xf8, 0xab, 0x81, 0xa5, 0x85, 0x2e, 0x90, 0xed, 0xd0, 0x00, 0x83, 0x01, 0x2b, 0xc2, 0x94, 0xa3,
//     0xbe, 0xd4, 0xe1, 0xc7, 0x5d, 0x00, 0xfa, 0x6f, 0x4e, 0x5e, 0x69, 0x22, 0xdb, 0x72, 0x61, 0xb5,
//     0xe9, 0xac, 0xd2, 0x80, 0xb8, 0x44, 0xa9, 0x05, 0x9c, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0xda, 0x8b, 0x98, 0x23, 0xb8, 0x49, 0x0e, 0x8c, 0xf2,
//     0x20, 0xdc, 0x7b, 0x91, 0xd9, 0x7d, 0xa1, 0xc5, 0x4e, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x05, 0x6b, 0xc7, 0x5e, 0x2d, 0x63, 0x10, 0x00, 0x00, 0x26, 0xa0, 0x6c, 0x89, 0xb5, 0x71,
//     0x13, 0xcf, 0x7d, 0xa8, 0xae, 0xd7, 0x91, 0x13, 0x10, 0xe0, 0x3d, 0x49, 0xbe, 0x5e, 0x40, 0xde,
//     0x0b, 0xd7, 0x3a, 0xf4, 0xc9, 0xc5, 0x47, 0x26, 0xc4, 0x78, 0x69, 0x1b, 0xa0, 0x56, 0x22, 0x3f,
//     0x03, 0x9f, 0xab, 0x98, 0xd4, 0x7c, 0x71, 0xf8, 0x41, 0x90, 0xcf, 0x28, 0x5c, 0xe8, 0xfc, 0x7d,
//     0x91, 0x81, 0xd6, 0x76, 0x93, 0x87, 0xe5, 0xef, 0xd0, 0xa9, 0x70, 0xe2, 0xe9,
// ];
// const BLOCK_DATA_B: &[u8] = &[
//     0xf8, 0xab, 0x81, 0xa6, 0x85, 0x2e, 0x90, 0xed, 0xd0, 0x00, 0x83, 0x01, 0x2b, 0xc2, 0x94, 0xa3,
//     0xbe, 0xd4, 0xe1, 0xc7, 0x5d, 0x00, 0xfa, 0x6f, 0x4e, 0x5e, 0x69, 0x22, 0xdb, 0x72, 0x61, 0xb5,
//     0xe9, 0xac, 0xd2, 0x80, 0xb8, 0x44, 0xa9, 0x05, 0x9c, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0xda, 0x8b, 0x98, 0x23, 0xb8, 0x49, 0x0e, 0x8c, 0xf2,
//     0x20, 0xdc, 0x7b, 0x91, 0xd9, 0x7d, 0xa1, 0xc5, 0x4e, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x05, 0x6b, 0xc7, 0x5e, 0x2d, 0x63, 0x10, 0x00, 0x00, 0x26, 0xa0, 0xd7, 0x7c, 0x66, 0x15,
//     0x3a, 0x66, 0x1e, 0xcc, 0x98, 0x66, 0x11, 0xdf, 0xfd, 0xa1, 0x29, 0xe1, 0x45, 0x28, 0x43, 0x5e,
//     0xd3, 0xfd, 0x24, 0x4c, 0x3a, 0xfb, 0x0d, 0x43, 0x4e, 0x9f, 0xd1, 0xc1, 0xa0, 0x5a, 0xb2, 0x02,
//     0x90, 0x8b, 0xf6, 0xcb, 0xc9, 0xf5, 0x7c, 0x59, 0x5e, 0x6e, 0xf3, 0x22, 0x9b, 0xce, 0x80, 0xa1,
//     0x5c, 0xdf, 0x67, 0x48, 0x78, 0x73, 0xe5, 0x7c, 0xc7, 0xf5, 0xad, 0x7c, 0x8a,
// ];
// const BLOCK_DATA_C: &[u8] = &[
//     0xf8, 0x6d, 0x82, 0x29, 0xf1, 0x85, 0x19, 0x9c, 0x82, 0xcc, 0x00, 0x82, 0x52, 0x08, 0x94, 0x88,
//     0xe9, 0xa2, 0xd3, 0x8e, 0x66, 0x05, 0x7e, 0x18, 0x54, 0x5c, 0xe0, 0x3b, 0x3a, 0xe9, 0xce, 0x4f,
//     0xc3, 0x60, 0x53, 0x87, 0x02, 0xce, 0x7d, 0xe1, 0x53, 0x7c, 0x00, 0x80, 0x25, 0xa0, 0x96, 0xe7,
//     0xa1, 0xd9, 0x68, 0x3b, 0x20, 0x5f, 0x69, 0x7b, 0x40, 0x73, 0xa3, 0xe2, 0xf0, 0xd0, 0xad, 0x42,
//     0xe7, 0x08, 0xf0, 0x3e, 0x89, 0x9c, 0x61, 0xed, 0x6a, 0x89, 0x4a, 0x7f, 0x91, 0x6a, 0xa0, 0x5d,
//     0xa2, 0x38, 0xfb, 0xb9, 0x6d, 0x41, 0xa4, 0xb5, 0xec, 0x03, 0x38, 0xc8, 0x6c, 0xfc, 0xb6, 0x27,
//     0xd0, 0xaa, 0x8e, 0x55, 0x6f, 0x21, 0x52, 0x8e, 0x62, 0xf3, 0x1c, 0x32, 0xf7, 0xe6, 0x72,
// ];
// const BLOCK_DATA_D: &[u8] = &[
//     0xf8, 0x6f, 0x82, 0x6b, 0x25, 0x85, 0x19, 0x9c, 0x82, 0xcc, 0x00, 0x83, 0x01, 0x5f, 0x90, 0x94,
//     0xe9, 0x55, 0xed, 0xe0, 0xa3, 0xdb, 0xf6, 0x51, 0xe2, 0x89, 0x13, 0x56, 0xec, 0xd0, 0x50, 0x9c,
//     0x1e, 0xdb, 0x8d, 0x9c, 0x88, 0x01, 0x05, 0x1f, 0xdc, 0x4e, 0xfd, 0xc0, 0x00, 0x80, 0x25, 0xa0,
//     0x21, 0x90, 0xf2, 0x6e, 0x70, 0xa8, 0x2d, 0x7f, 0x66, 0x35, 0x4a, 0x13, 0xcd, 0xa7, 0x9b, 0x6a,
//     0xf1, 0xaa, 0x80, 0x8d, 0xb7, 0x68, 0xa7, 0x87, 0xae, 0xb3, 0x48, 0xd4, 0x25, 0xd7, 0xd0, 0xb3,
//     0xa0, 0x6a, 0x82, 0xbd, 0x05, 0x18, 0xbc, 0x9b, 0x69, 0xdc, 0x55, 0x1e, 0x20, 0xd7, 0x72, 0xa1,
//     0xb0, 0x62, 0x22, 0xed, 0xfc, 0x5d, 0x39, 0xb6, 0x97, 0x3e, 0x4f, 0x4d, 0xc4, 0x6e, 0xd8, 0xb1,
//     0x96,
// ];

// fn main() {
//     let mut rlp_stream = RlpStream::new();
//     rlp_stream.append(&0u8);
//     rlp_stream.append_raw(BLOCK_DATA_A, BLOCK_DATA_A.len());
//     rlp_stream.append(&1u8);
//     rlp_stream.append_raw(BLOCK_DATA_B, BLOCK_DATA_B.len());
//     rlp_stream.append(&2u8);
//     rlp_stream.append_raw(BLOCK_DATA_C, BLOCK_DATA_C.len());
//     rlp_stream.append(&3u8);
//     rlp_stream.append_raw(BLOCK_DATA_D, BLOCK_DATA_D.len());

//     let encoded = rlp_stream.out();
//     println!(
//         "encoded = {}",
//         encoded
//             .iter()
//             .map(|x| format!("{x:02x}"))
//             .collect::<String>()
//     );

//     let mut hasher = sha3::Keccak256::default();
//     hasher.update(&encoded);
//     let hash: [u8; 32] = hasher.finalize().into();
//     println!(
//         "hash    = {}",
//         hash.iter().map(|x| format!("{x:02x}")).collect::<String>()
//     );
// }
